<?xml version="1.0" encoding="utf-8"?>
<!-- 02.07.12 - NE - Updated dataTip for charts to show sig fig values and still plot full precision. Tweaks formatting. -->
<!-- 01.24.12 - NE - Changed contact link. -->
<!-- 08.03.11 - NE - Reformatted data tab. -->
<!-- 08.03.11 - NE - Updates to display data as 'n/a' if value is -999. -->
<!-- 03.13.11 - NE - Added link to shapefile of data. -->
<!-- 03.13.11 - NE - Added tooltips to text in data download tables. -->
<!-- 03.12.11 - NE - Updated tooltips for blue ?s in charts tab. -->
<!-- 03.11.11 - NE - Added custom item renderer to display reporting level. Made updates to display new data. -->
<!-- 02.28.11 - NE - Added intersecting parks and networks to data window. Added new constituent. Updated chart tooltips. -->
<!-- 02.25.11 - NE - Combine data summary and data download tabs. -->
<!-- 02.22.11 - NE - Improved performance of MercuryDataWindow charts. -->
<!-- 02.22.11 - NE - Updated download data and chart tabs. -->
<!-- 02.17.11 - NE - Added Charts of HUC data and data download tabs. -->
<!-- 02.04.11 - NE - Updated MercuryDataWindow layout. -->
<!-- 12.13.10 - NE - Updated to exclude maximize button on window. -->
<!-- 11.17.10 - NE - Updated for grid query capability. Added functionality to zoom to extent of flood graphics for site. Added loading message while flood graphics are returned to map.  -->
<!-- 11.15.10 - NE - Updated FloodToolsWindow styles.  Updated floodSlideChange event. -->
<!-- 11.09.10 - NE - Moved much of flood tools functionality to FloodToolsWindow component mxml file. -->
<!-- 11.04.10 - NE - Initial creation of FloodToolsWindow component -->
<wim:WiMInfoWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" 
				   xmlns:esri="http://www.esri.com/2008/ags"
				   xmlns:wim="gov.usgs.wim.controls.*"
				   edgeBoundary="500"
				   title="{'  Hydrologic Unit Code (HUC): '+ data.HUC + ' (' + data.CAT_NAME + ')'}"
				   creationComplete="componentLoad()" xmlns:local="*" xmlns:controls="controls.*">
	
	<fx:Style source="assets/styles/main.css"/>		   				
	
	<fx:Declarations>
		<!-- Fills for constituent percentiles -->
		<mx:SolidColor id="high" color="0xa75d44"/>
		<mx:SolidColor id="highMid" color="0xdc7b4c"/>
		<mx:SolidColor id="mid" color="0xfda934"/>
		<mx:SolidColor id="lowMid" color="0xfdce73"/>
		<mx:SolidColor id="low" color="0xFEE9A3"/>
		<mx:SolidColor id="reportingLevel" color="black"/>
		
		<!-- Fill for constituent point data -->
		<mx:SolidColor id="point" color="0x6d8b2b"/>
		
		<!-- Fill for table -->
		<mx:SolidColor id="grayFill" color="0xFFFFFF"/>
		
		<esri:QueryTask id="networkTask" showBusyCursor="true"
						url="{resourceManager.getString('urls', 'HgDataUrl')}/2" />
		<esri:Query id="networkQuery" returnGeometry="false">
			<esri:outFields>
				<fx:String>FID</fx:String>
				<fx:String>NETWORK_NA</fx:String>
				<fx:String>NETWORK_CO</fx:String>
			</esri:outFields>
		</esri:Query>
		<esri:Query id="networkZoom" returnGeometry="true" />
		
		<esri:QueryTask id="unitTask" showBusyCursor="true"
						url="{resourceManager.getString('urls', 'HgDataUrl')}/3" />
		<esri:Query id="unitQuery" returnGeometry="false">
			<esri:outFields>
				<fx:String>FID</fx:String>
				<fx:String>UNIT_NAME</fx:String>
			</esri:outFields>
		</esri:Query>
		<esri:Query id="unitZoom" returnGeometry="true" />
		
		<esri:QueryTask id="parkTableTask" showBusyCursor="true"
						url="{resourceManager.getString('urls', 'HgDataUrl')}/6" />
		<esri:Query id="parkTableQuery" returnGeometry="false">
			<esri:outFields>
				<fx:String>PARK_NA1</fx:String>
				<fx:String>PCT_AR1</fx:String>
				<fx:String>PARK_NA2</fx:String>
				<fx:String>PCT_AR2</fx:String>
				<fx:String>PARK_NA3</fx:String>
				<fx:String>PCT_AR3</fx:String>
				<fx:String>PARK_NA4</fx:String>
				<fx:String>PCT_AR4</fx:String>
				<fx:String>PARK_NA5</fx:String>
				<fx:String>PCT_AR5</fx:String>
				<fx:String>PARK_NA6</fx:String>
				<fx:String>PCT_AR6</fx:String>
				<fx:String>PARK_NA7</fx:String>
				<fx:String>PCT_AR7</fx:String>
				<fx:String>PARK_NA8</fx:String>
				<fx:String>PCT_AR8</fx:String>
				<fx:String>HUC</fx:String>
				<fx:String>CAT_NAME</fx:String>
				<fx:String>PREDMEHG</fx:String>
				<fx:String>MED_PH</fx:String>
				<fx:String>MED_SULF</fx:String>
				<fx:String>MED_TOC</fx:String>
				<fx:String>PRC_WTLD</fx:String>
			</esri:outFields>
		</esri:Query>
		
		<s:RichText id="sulfateLabel" textAlign="center" verticalAlign="middle" height="100%">
			<s:span>SULFATE (mg/L as SO</s:span>
			<s:span baselineShift="subscript">4</s:span>
			<s:span>)</s:span>
		</s:RichText>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.utils.GraphicUtil;
			
			import mx.charts.HitData;
			import mx.charts.series.LineSeries;
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.controls.HRule;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.SliderEvent;
			import mx.events.StateChangeEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public var pmehgValue:Number = 0;
			[Bindable]
			public var pmehgQuantiles:ArrayCollection = new ArrayCollection([
				{constituent:"", label:"Predicted Methylmercury", min:0.015, 20:0.038, 40:0.053, 60:0.075, 80:0.12, 100:0.74}]); 
			
			[Bindable]
			public var phValue:Number = 0;
			[Bindable]
			public var phQuantiles:ArrayCollection = new ArrayCollection([
				{constituent:"", label:"pH", min:4.6, 20:7.0, 40:7.5, 60:7.9, 80:8.1, 100:8.7}]);
			
			[Bindable]
			public var sulfateValue:Number = 0;
			[Bindable]
			public var sulfateQuantiles:ArrayCollection = new ArrayCollection([
				{constituent:"", label:"Sulfate", min:0.28, 20:4.6, 40:9.2, 60:20, 80:92, 100:2800}]);
			
			[Bindable]
			public var carbonValue:Number = 0;
			[Bindable]
			public var carbonQuantiles:ArrayCollection = new ArrayCollection([
				{constituent:"", label:"Total Organic Carbon", min:0.60, 20:1.7, 40:2.5, 60:3.9, 80:6.9, 100:69}]);
			
			[Bindable]
			public var wetlandValue:Number = 0;
			[Bindable]
			public var wetlandQuantiles:ArrayCollection = new ArrayCollection([
				{constituent:"", label:"Wetland", min:0.0004, 20:0.2, 40:0.8, 60:2.3, 80:6.7, 100:76}]);
			
			[Bindable]
			private var HUCValues:Array;
			
			private var reportingLevelValue:ArrayCollection = new ArrayCollection([
				{label: "", rl:0.04}]);
			
			[Bindable]
			private var pmehgVal:ArrayCollection = new ArrayCollection([{constituent:"Predicted MeHg (ng/L)", value:null}]);
			[Bindable]
			private var phVal:ArrayCollection = new ArrayCollection([{constituent:"phVal (standard units)", value:null}]);
			[Bindable]
			private var sulfateVal:ArrayCollection = new ArrayCollection([{constituent:"Sulfate (mg/L)", value:null}]);
			[Bindable]
			private var carbonVal:ArrayCollection = new ArrayCollection([{constituent:"Total Organic Carbon (mg/L)", value:null}]);
			[Bindable]
			private var wetlandVal:ArrayCollection = new ArrayCollection([{constituent:"Wetland (%)", value:null}]);
			
			private var _data:Object;
			
			[Bindable]
			private var networks:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var unitResults:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var unitResultsHolder:ArrayCollection = new ArrayCollection();
			
			private var tempObj:Object = {};
			
			[Bindable]
			private var parkClickTabChange:Boolean = false;
			
			[Bindable]
			private var hasAsterisk:Boolean = false;
			
			
			protected function componentLoad():void
			{
				if (data != null) {
					HUCValues = [
						{constituent:"Predicted MeHg (ng/L)", value:data.FULLMEHG},
						{constituent:"Wetlands (%)", value:data.FULLWTLD},
						{constituent:"pH", value:data.FULLPH},
						{constituent:"Sulfate (mg/L)", value:data.FULLSULF},
						{constituent:"Carbon (mg/L)", value:data.FULLTOC}  ];
					
					pmehgVal.setItemAt({constituent:"Predicted MeHg (ng/L)", value:data.FULLMEHG},0);
					phVal.setItemAt({constituent:"pH", value:data.FULLPH},0);
					sulfateVal.setItemAt({constituent:"Sulfate (mg/L)", value:data.FULLSULF},0);
					carbonVal.setItemAt({constituent:"Carbon (mg/L)", value:data.FULLTOC},0);
					wetlandVal.setItemAt({constituent:"Wetland (%)", value:data.FULLWTLD},0);
					
					pmehgValue = data.CPREDMEHG;
					pmehgQuantiles.addItem({constituent:"Predicted MeHg (ng/L)", value:pmehgValue});
					pmehgQuantiles.refresh();
					
					phValue = data.CMED_PH;
					phQuantiles.addItem({constituent:"pH (standard units)", value:phValue});
					phQuantiles.refresh();
					
					sulfateValue = data.CMED_SULF;
					sulfateQuantiles.addItem({constituent:"Sulfate (mg/L)", value:sulfateValue});
					sulfateQuantiles.refresh();
					
					carbonValue = data.CMED_TOC;
					carbonQuantiles.addItem({constituent:"Carbon (mg/L)", value:carbonValue});
					carbonQuantiles.refresh();
					
					wetlandValue = data.CPRC_WTLD;
					wetlandQuantiles.addItem({constituent:"Wetland (%)", value:wetlandValue});
					wetlandQuantiles.refresh();
					
					//Buld parks and links to park data tab
					 
					for (var i:int = 1; i <= 8; i++) {
						if (data["PARK_NA"+i].length > 4) {
							var tempHGroup:spark.components.HGroup = new spark.components.HGroup();
							var tempParkLabel:spark.components.Label = new spark.components.Label();
							var tempPctLabel:spark.components.Label = new spark.components.Label();
							
							tempHGroup.paddingLeft = 20;
							
							tempParkLabel.setStyle("textDecoration", "underline");
							tempParkLabel.setStyle("fontWeight", "normal");
							tempParkLabel.useHandCursor = true;
							tempParkLabel.mouseChildren = false;
							tempParkLabel.buttonMode = true;
							tempParkLabel.text = data["PARK_NA"+i];
							tempParkLabel.toolTip = "Clicking on link will zoom map to park unit, and will load data for all HUCs in this park unit into the Park Data tab.";
							tempParkLabel.addEventListener(MouseEvent.CLICK, function(event):void {
								var parkTargetText:String = event.currentTarget.text;
								dataTabs.selectedIndex = 2;
								if (parkTable != null) {
									parkTable.removeAllElements();
								}
								parkDataTab.addEventListener(FlexEvent.UPDATE_COMPLETE, parkTabComp);
								
								unitResults = unitResultsHolder;
								if (networkCombo != null) {
									networkCombo.selectedIndex = -1;
								}
								
								
								function parkTabComp(event):void {
									unitCombo.addEventListener(FlexEvent.UPDATE_COMPLETE, unitComboUpdate);
									parkDataTab.removeEventListener(FlexEvent.UPDATE_COMPLETE, parkTabComp);
									
									for (var i:int = 0; i < unitResults.length; i++) {
										if (parkTargetText.match(unitResults[i].label)) {
											if (unitCombo != null) {
												unitCombo.selectedIndex = i;
												parkGo.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
											}
										}
									}
									
									function unitComboUpdate(event):void {
										//parkGo.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
									}
									
								}
							});
							
							tempPctLabel.text = "(" + data["PCT_AR"+i] + "%)";
							tempPctLabel.setStyle("fontWeight", "normal");
							
							tempHGroup.addElement(tempParkLabel);
							tempHGroup.addElement(tempPctLabel);
								
							parkGroup.addElement(tempHGroup);
						} 
					}  
				
				}
				
				maximizeButton.visible = false;
				maximizeButton.includeInLayout = false;
				minimizeButton.right = 24;
				
				FlexGlobals.topLevelApplication.printFromMap = printChartFromMap;
				
				//HUC Data layer to hide by default
				networkQuery.where = "FID >= 0";
				networkTask.execute(networkQuery, new AsyncResponder(networkResult, queryFault));
				
				function networkResult(featureSet:FeatureSet, token:Object = null):void 
				{
					
					var networkAttr:Object = networkTask.executeLastResult.attributes;
					var i:int;
					for (i = 0; i < networkAttr.length; i++) {
						networks.addItem({label: networkAttr[i].NETWORK_NA, data: networkAttr[i].NETWORK_CO, fid: networkAttr[i].FID});
					}
					var netSortField:SortField = new SortField();
					netSortField.name = "label";
					var networkSort:Sort = new Sort();
					networkSort.fields = [netSortField];
					
					networks.sort = networkSort;
					networks.refresh();
					
				}
				
				unitQuery.where = "FID >= 0";
				unitTask.execute(unitQuery, new AsyncResponder(firstUnitResult, queryFault));
				
				function firstUnitResult(featureSet:FeatureSet, token:Object = null):void 
				{
					var unitAttr:Object = unitTask.executeLastResult.attributes;
					var i:int;
					for (i = 0; i < unitAttr.length; i++) {
						unitResults.addItem({label:unitAttr[i].UNIT_NAME});
					}
					var unitSortField:SortField = new SortField();
					unitSortField.name = "label";
					var unitSort:Sort = new Sort();
					unitSort.fields = [unitSortField];
					unitResults.sort = unitSort;
					unitResults.filterFunction = deDupe;
					
					unitResults.refresh();
					
					unitResultsHolder = unitResults;
				}
				
			}
			
			private function dataTipFunction(hitData:HitData):String {
				var dataTip:String = "";
				var displayName = "";
				if (hitData.element is ColumnSeries) {
					var columnSeries:ColumnSeries = hitData.element as ColumnSeries;
					displayName = columnSeries.displayName;
					var label:String = columnSeries.dataProvider[0].label;
					var units:String = "";
					switch (label) {
						case "pH" :
							units = "";
							break;
						case "Sulfate" :
							units = " mg/L as SO" + "<font style='font-size: 4'>4</font>";
							break;
						case "Total Organic Carbon" :
							units = " mg/L";
							break;
						case "Wetland" : 
							units = "%";
							break;
						case "Predicted Methylmercury" :
							units = " ng/L";
							break;
					}
					dataTip = "<b>" + columnSeries.dataProvider[0].label + "</b>";
					if (displayName == "0-20%") {
						dataTip += "<br/>0th to 20th percentile<br/>high: " + columnSeries.dataProvider[0][20] + units + "<br/>" +
						"low: " + columnSeries.dataProvider[0].min + units;
					} else if (displayName == "20-40%") {
						dataTip += "<br/>20th to 40th percentile<br/>high: " + columnSeries.dataProvider[0][40] + units + "<br/>" +
						"low: " + columnSeries.dataProvider[0][20] + units;
					} else if (displayName == "40-60%") {
						dataTip += "<br/>40th to 60th percentile<br/>high: " + columnSeries.dataProvider[0][60] + units + "<br/>" +
						"low: " + columnSeries.dataProvider[0][40] + units;
					} else if (displayName == "60-80%") {
						dataTip += "<br/>60th to 80th percentile<br/>high: " + columnSeries.dataProvider[0][80] + units + "<br/>" +
						"low: " + columnSeries.dataProvider[0][60] + units;
					} else if (displayName == "80-100%") {
						dataTip += "<br/>80th to 100th percentile<br/>high: " + columnSeries.dataProvider[0][100] + units + "<br/>" +
						"low: " + columnSeries.dataProvider[0][80] + units;
					}
				} else if (hitData.element is PlotSeries) {
					var plotSeries:PlotSeries = hitData.element as PlotSeries;
					displayName = plotSeries.displayName;
					if (displayName == "pmehg") {
						dataTip = "<b>HUC Value</b><br/>" +
							"Predicted Methylmercury = " + data.PREDMEHG + " ng/L";
					} else if (displayName == "ph") {
						dataTip = "<b>HUC Value</b><br/>" +
							"pH = " + data.MED_PH;
					} else if (displayName == "sulfate") {
						dataTip = "<b>HUC Value</b><br/>" +
							"Sulfate = " + data.MED_SULF + " mg/L as SO4";
					} else if (displayName == "carbon") {
						dataTip = "<b>HUC Value</b><br/>" +
							"Total Organic Carbon = " + data.MED_TOC + " mg/L";
					} else if (displayName == "wetland") {
						dataTip = "<b>HUC Value</b><br/>" +
							"Wetland = " + data.PRC_WTLD + "%";
					}
				}
				
				return dataTip;
			}
			
			private function exDataTipFunction(hitData:HitData):String {
				var dataTip:String = "";
				var displayName = "";
				if (hitData.element is ColumnSeries) {
					var columnSeries:ColumnSeries = hitData.element as ColumnSeries;
					displayName = columnSeries.displayName;
					if (displayName == "0-20%") {
						dataTip = "This range of values represents data from the minimum value to the 20th percentile (that is, the lowest 20% of values in the dataset).";
					} else if (displayName == "80-100%") {
						dataTip = "This range of values represents data from the 80th percentile to the maximum value (that is, the highest 20% of values in the dataset).";
					} else if (displayName == "60-80%") {
						dataTip = "This range of values represents data from the 60th to the 80th percentile.";
					} else if (displayName == "40-60%") {
						dataTip = "This range of values represents data from the 40th to the 60th percentile.";
					} else if (displayName == "20-40%") {
						dataTip = "This range of values represents data from the 20th to the 40th percentile.";
					}
				} else if (hitData.element is PlotSeries) {
					var plotSeries:PlotSeries = hitData.element as PlotSeries;
					displayName = plotSeries.displayName;
					if (displayName == "carbon") {
						dataTip = "<p>Data value for the individual, selected HUC. </p><br>" +
							"<p>For any park with multiple HUCs overlapping its boundaries, the values of all overlapping HUCs need to be considered to yield a holistic picture of potential conditions in that park.</p>";
					}
				}
				
				return dataTip;
			}
			
			public function printChartFromMap():void {
				predmehgQuestion.includeInLayout = false;
				predmehgQuestion.visible = false;
				phQuestion.includeInLayout = false;
				phQuestion.visible = false;
				sulfateQuestion.includeInLayout = false;
				sulfateQuestion.visible = false;
				carbonQuestion.includeInLayout = false;
				carbonQuestion.visible = false;
				wetlandQuestion.includeInLayout = false;
				wetlandQuestion.visible = false;
				FlexGlobals.topLevelApplication.printCharts(networksIntersectForPrint.text,parksIntersect.text,pmehgChartAll,phChartAll,sulfateChartAll,carbonChartAll,wetlandChartAll,true);
				predmehgQuestion.includeInLayout = true;
				predmehgQuestion.visible = true;
				phQuestion.includeInLayout = true;
				phQuestion.visible = true;
				sulfateQuestion.includeInLayout = true;
				sulfateQuestion.visible = true;
				carbonQuestion.includeInLayout = true;
				carbonQuestion.visible = true;
				wetlandQuestion.includeInLayout = true;
				wetlandQuestion.visible = true;
			}
			
			private function chartsOnly():void {
				predmehgQuestion.includeInLayout = false;
				predmehgQuestion.visible = false;
				phQuestion.includeInLayout = false;
				phQuestion.visible = false;
				sulfateQuestion.includeInLayout = false;
				sulfateQuestion.visible = false;
				carbonQuestion.includeInLayout = false;
				carbonQuestion.visible = false;
				wetlandQuestion.includeInLayout = false;
				wetlandQuestion.visible = false;
				FlexGlobals.topLevelApplication.printCharts(networksIntersectForPrint.text,parksIntersect.text,pmehgChartAll,phChartAll,sulfateChartAll,carbonChartAll,wetlandChartAll,false);
				predmehgQuestion.includeInLayout = true;
				predmehgQuestion.visible = true;
				phQuestion.includeInLayout = true;
				phQuestion.visible = true;
				sulfateQuestion.includeInLayout = true;
				sulfateQuestion.visible = true;
				carbonQuestion.includeInLayout = true;
				carbonQuestion.visible = true;
				wetlandQuestion.includeInLayout = true;
				wetlandQuestion.visible = true;
					
			}
			
			private function plotOver(event:MouseEvent):void
			{
				event.preventDefault();
			}
			
			private function chooseEvent(event:Event):void {
				if (unitCombo.selectedIndex == -1) {
					if (networkCombo.selectedItem != undefined) {
						networkQuery.where = "FID = " + networkCombo.selectedItem.fid;
						networkQuery.returnGeometry = true;
						networkTask.execute(networkQuery, new AsyncResponder(zoomResult, queryFault));
					}
				} else {
					unitChoose(event);
				}
			}
			
			private function networkChoose(event:Event):void 
			{
				if (networkCombo.selectedIndex == -1) { 
					unitQuery.where = "FID >= 0";
					unitTask.execute(unitQuery, new AsyncResponder(unitResult, queryFault));
				} else {
					unitQuery.where = "CODE = '" + networkCombo.selectedItem.data + "'";
					unitTask.execute(unitQuery, new AsyncResponder(unitResult, queryFault));
				}
			}
			
			private function unitChoose(event:Event):void
			{
				if (unitCombo.selectedItem != null) {
					unitZoom.where = "UNIT_NAME = '" + unitCombo.selectedItem.label + "'";
					unitTask.execute(unitZoom, new AsyncResponder(zoomResult, queryFault));
					
					//code here for getting park data for table
					parkTableQuery.where = "PARK_NA1 LIKE '%" + unitCombo.selectedItem.label 
						+ "%' OR PARK_NA2 LIKE '%" + unitCombo.selectedItem.label 
						+ "%' OR PARK_NA3 LIKE '%" + unitCombo.selectedItem.label 
						+ "%' OR PARK_NA4 LIKE '%" + unitCombo.selectedItem.label 
						+ "%' OR PARK_NA5 LIKE '%" + unitCombo.selectedItem.label 
						+ "%' OR PARK_NA6 LIKE '%" + unitCombo.selectedItem.label 
						+ "%' OR PARK_NA7 LIKE '%" + unitCombo.selectedItem.label 
						+ "%' OR PARK_NA8 LIKE '%" + unitCombo.selectedItem.label + "%'";
					parkTableTask.execute(parkTableQuery, new AsyncResponder(parkTableResult, queryFault, {park: unitCombo.selectedItem.label}));
				}
			}
			
			private function parkTableResult(featureSet:FeatureSet, token:Object = null):void
			{
				parkTable.removeAllElements();
				
				var tableRow:spark.components.HGroup = new spark.components.HGroup();
				tableRow.horizontalAlign = "center";
				tableRow.verticalAlign = "middle";
				tableRow.setStyle("fontWeight", "bold");
				tableRow.setStyle("textAlign", "center");
				tableRow.percentHeight = 100;
				tableRow.percentWidth = 100;
				
				//Park Name
				var parkLabel:spark.components.Label = new spark.components.Label();
				parkLabel.width = 100;
				parkLabel.text = "PARK UNIT";
				tableRow.addElement(parkLabel);
				//HUC
				var parkLabel:spark.components.Label = new spark.components.Label();
				parkLabel.width = 65;
				parkLabel.text = "HUC";
				tableRow.addElement(parkLabel);
				//HUC Name
				var parkLabel:spark.components.Label = new spark.components.Label();
				parkLabel.width = 95;
				parkLabel.text = "HUC NAME";
				tableRow.addElement(parkLabel);
				//Percent of park in HUC
				var parkLabel:spark.components.Label = new spark.components.Label();
				parkLabel.width = 90;
				parkLabel.text = "PERCENT OF PARK IN HUC";
				tableRow.addElement(parkLabel);
				//pH
				var parkLabel:spark.components.Label = new spark.components.Label();
				parkLabel.width = 65;
				parkLabel.text = "pH (standard units)";
				tableRow.addElement(parkLabel);
				//Sulfate
				var sulfLabel:spark.components.RichText = new spark.components.RichText();
				sulfLabel = sulfateLabel;
				sulfLabel.width = 65;
				tableRow.addElement(sulfLabel);
				//Carbon
				var parkLabel:spark.components.Label = new spark.components.Label();
				parkLabel.width = 65;
				parkLabel.text = "TOTAL ORGANIC CARBON (mg/L)";
				tableRow.addElement(parkLabel);
				//Wetland
				var parkLabel:spark.components.Label = new spark.components.Label();
				parkLabel.width = 65;
				parkLabel.text = "WETLAND (%)";
				tableRow.addElement(parkLabel);
				//Predicted MeHg
				var parkLabel:spark.components.Label = new spark.components.Label();
				parkLabel.width = 100;
				parkLabel.text = "PREDICTED METHYLMERCURY (ng/L)";
				tableRow.addElement(parkLabel);
				parkTable.addElement(tableRow);
				
				var hRule:HRule = new HRule();
				hRule.percentWidth = 100;
				
				parkTable.addElement(hRule);
				
				hasAsterisk = false;
				
				for (var j:int = 0; j < featureSet.features.length; j++) {
					for (var i:int = 1; i < 9; i++) {
						if (featureSet.features[j].attributes["PARK_NA"+i].match(token.park)) {
							
							var tableRow:spark.components.HGroup = new spark.components.HGroup();
							tableRow.horizontalAlign = "center";
							tableRow.percentHeight = 100;
							tableRow.percentWidth = 100;
							
							//Park Name
							var parkLabel:spark.components.Label = new spark.components.Label();
							parkLabel.width = 100;
							parkLabel.text = checkValue(featureSet.features[j].attributes["PARK_NA"+i]);
							tableRow.addElement(parkLabel);
							//HUC
							var hucLabel:spark.components.Label = new spark.components.Label();
							hucLabel.width = 65;
							hucLabel.text = checkValue(featureSet.features[j].attributes["HUC"]);
							tableRow.addElement(hucLabel);
							//HUC Name
							var hucNameLabel:spark.components.Label = new spark.components.Label();
							hucNameLabel.width = 95;
							hucNameLabel.text = checkValue(featureSet.features[j].attributes["CAT_NAME"]);
							tableRow.addElement(hucNameLabel);
							//Percent of park in HUC
							var pctParkLabel:spark.components.Label = new spark.components.Label();
							pctParkLabel.width = 90;
							pctParkLabel.text = checkValue(featureSet.features[j].attributes["PCT_AR"+i]) + "%";
							tableRow.addElement(pctParkLabel);
							//pH
							var phLabel:spark.components.Label = new spark.components.Label();
							phLabel.width = 65;
							phLabel.text = checkValue(featureSet.features[j].attributes["MED_PH"]);
							tableRow.addElement(phLabel);
							//Sulfate
							var sulfateLabel:spark.components.Label = new spark.components.Label();
							sulfateLabel.width = 65;
							sulfateLabel.text = checkValue(featureSet.features[j].attributes["MED_SULF"]);
							tableRow.addElement(sulfateLabel);
							//Carbon
							var carbonLabel:spark.components.Label = new spark.components.Label();
							carbonLabel.width = 65;
							carbonLabel.text = checkValue(featureSet.features[j].attributes["MED_TOC"]);
							tableRow.addElement(carbonLabel);
							//Wetland
							var wetlandLabel:spark.components.Label = new spark.components.Label();
							wetlandLabel.width = 65;
							wetlandLabel.text = checkValue(featureSet.features[j].attributes["PRC_WTLD"]);
							tableRow.addElement(wetlandLabel);
							//Predicted MeHg
							var predmehgLabel:spark.components.Label = new spark.components.Label();
							predmehgLabel.width = 100;
							if (featureSet.features[j].attributes["PREDMEHG"] < 0.04 && featureSet.features[j].attributes["PREDMEHG"] != "-999") {
								predmehgLabel.text = checkValue(featureSet.features[j].attributes["PREDMEHG"]) + "*";
								hasAsterisk = true;
							} else {
								predmehgLabel.text = checkValue(featureSet.features[j].attributes["PREDMEHG"]);
							}
							tableRow.addElement(predmehgLabel);
							parkTable.addElement(tableRow);
							
							var hRule:HRule = new HRule();
							hRule.percentWidth = 100;
							
							parkTable.addElement(hRule);
							
						}
					
					}
					
				}

			}
			
			private function unitResult(featureSet:FeatureSet, token:Object = null):void 
			{
				/*var unitAttr:Object = unitTask.executeLastResult.attributes;
				
				unitResults.removeAll();
				//unitCombo.prompt = "-- Select Unit --";
				var i:int;
				for (i = 0; i < unitAttr.length; i++) {
				unitResults.addItem({label:unitAttr[i].UNIT_NAME});
				}
				var unitSortField:SortField = new SortField();
				unitSortField.name = "label";
				var unitSort:Sort = new Sort();
				unitSort.fields = [unitSortField];
				
				unitResults.sort = unitSort;
				unitResults.filterFunction = deDupe;
				unitResults.refresh();*/
				var unitAttr:Object = unitTask.executeLastResult.attributes;
				unitResults = new ArrayCollection();
				var i:int;
				for (i = 0; i < unitAttr.length; i++) {
					unitResults.addItem({label:unitAttr[i].UNIT_NAME});
				}
				var unitSortField:SortField = new SortField();
				unitSortField.name = "label";
				unitResults.getItemAt(0);
				var unitSort:Sort = new Sort();
				unitSort.fields = [unitSortField];
				unitResults.sort = unitSort;
				tempObj = {};
				unitResults.filterFunction = deDupe;
				
				unitResults.refresh();
			}
			
			private function zoomResult(featureSet:FeatureSet, token:Object = null):void
			{
				var allExtent:Extent;
				var firstGraphic:Graphic= featureSet.features[0];                        
				allExtent = Polygon(firstGraphic.geometry).extent;
				var i:int;
				for each (var graphic:Graphic in featureSet.features) {
					allExtent = allExtent.union(Polygon(graphic.geometry).extent);
				}
				FlexGlobals.topLevelApplication.map.extent = allExtent; 
				//map.extent = featureSet.features[0].geometry.extent;
			}
			
			public function unitReset():void
			{
				unitQuery.where = "FID >= 0";
				unitTask.execute(unitQuery, new AsyncResponder(unitResult, queryFault));
				networkCombo.selectedIndex = -1;
				unitCombo.selectedIndex = -1;
			}
			
			private function deDupe(item:Object):Boolean {
				// the return value
				var retVal:Boolean = false;
				// check the items in the itemObj Ojbect to see if it contains the value being tested
				if (!tempObj.hasOwnProperty(item.label)) {
					// if not found add the item to the object
					tempObj[item.label] = item;
					retVal = true;
				}
				return retVal;
				// or if you want to feel like a total bad ass and use only one line of code, use a tertiary statement ;)
				// return (tempObj.hasOwnProperty(item.label) ? false : tempObj[item.label] = item && true);
			}
			
			private function queryFault(info:Object, token:Object = null):void
			{
				Alert.show(info.toString());
			} 
			
			private function roundValues(fieldValue:String,decPlaces:Number):String {
				var outputValue:String;
				
				outputValue = ((Number(fieldValue)).toFixed(decPlaces)).toString()
				
				return outputValue;
			}
			
			private function checkValue(attr:String):String {
				var text:String;
				if (attr == '-999' || attr == null) {
					text = 'Insufficient Data';
				} else {
					text = attr;
				}
				
				return text;
			}
			
			protected function zoomToFeatures():void {
				var graphicProvider:ArrayCollection = FlexGlobals.topLevelApplication.queryGraphicsLayer.graphicProvider as ArrayCollection;
				var graphics4Zoom:ArrayCollection = new ArrayCollection();
				for each (var graphic:Graphic in graphicProvider) {
					if (graphic.geometry != null) {
						graphics4Zoom.addItem(graphic);
						break;
					}
				}
				var graphicsExtent:Extent = GraphicUtil.getGraphicsExtent(graphics4Zoom.toArray());
				
				FlexGlobals.topLevelApplication.map.extent = graphicsExtent.expand(2.1);
			}
			
		]]>
	</fx:Script>
	
	<mx:VBox color="white" height="100%" backgroundColor="0xBBBBBB" width="100%" paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5" >
		<mx:TabNavigator id="dataTabs" height="100%" color="black">
			<mx:VBox id="chartTab" label="HUC Data" height="650" width="880" paddingTop="20" paddingLeft="15" paddingRight="15" paddingBottom="20">
				<mx:HBox id="dataPrintOptions" width="100%" horizontalAlign="right" fontFamily="Arial" fontWeight="bold" fontSize="12" >
					<s:Label text="Download Data " styleName="line" color="black" fontWeight="normal" useHandCursor="true" buttonMode="true" mouseChildren="false" toolTip="Download Data" click="{dataTabs.selectedChild = dataDownloadTab}" />
					<s:Label text=" || " />
					<s:Label id="chartPrintlink" text="Print charts" styleName="line" color="black" fontWeight="normal" useHandCursor="true" buttonMode="true" mouseChildren="false" toolTip="Print Charts" click="chartsOnly()" />
					<s:Label text=" || " />
					<s:Label id="mapAndChartPrintlink" text="Print charts and map" styleName="line" color="black" fontWeight="normal" useHandCursor="true" buttonMode="true" mouseChildren="false" toolTip="Print Charts and Map" click="FlexGlobals.topLevelApplication.startPrint(event)" />
				</mx:HBox>
				<!--<s:Label fontFamily="Arial" fontWeight="bold" fontSize="20" text="Charts of data for selected HUC"/>-->
				<s:Label text="HUC Data" paddingLeft="10" paddingBottom="15" paddingTop="-15" color="0xa75d44" fontFamily="Arial" fontWeight="bold" fontSize="16" />
				<s:HGroup paddingLeft="10" gap="0" paddingBottom="5">
					<s:Label color="0x6d8b2b" fontFamily="Arial" fontWeight="bold" fontSize="16" text="Hydrologic Unit Code (HUC):"
							 useHandCursor="true" buttonMode="true" mouseChildren="false" click="dataTabs.selectedIndex = 1" />
					<s:Label useHandCursor="true" textDecoration="underline" 
							 buttonMode="true" 
							 mouseChildren="false" 
							 click="zoomToFeatures()" 
							 color="0x6d8b2b" fontFamily="Arial" toolTip="Clicking on link will zoom map to HUC." fontSize="16" text="{data.HUC} ({data.CAT_NAME})"/>
				</s:HGroup>
				<s:VGroup>
					<s:Label id="networksIntersectForPrint" includeInLayout="false" visible="false" paddingLeft="30" fontFamily="Arial" fontSize="12" text="NPS I&amp;M Networks: {(data.NTWK_NA1.length > 4)? data.NTWK_NA1 : ''}{(data.NTWK_NA2.length > 4) ? ', '+data.NTWK_NA2 : ''}{(data.NTWK_NA3.length > 4) ? ', '+data.NTWK_NA3 : ''}{(data.NTWK_NA4.length > 4) ? ', '+data.NTWK_NA4 : ''}"/>
					<s:Label id="networksIntersect" paddingLeft="10" fontFamily="Arial" fontWeight="bold" fontSize="12" text="NPS I&amp;M Networks:"/>
					<s:Label paddingLeft="30" fontFamily="Arial" fontSize="12" text="{(data.NTWK_NA1.length > 4)? data.NTWK_NA1 : ''}{(data.NTWK_NA2.length > 4) ? ', '+data.NTWK_NA2 : ''}{(data.NTWK_NA3.length > 4) ? ', '+data.NTWK_NA3 : ''}{(data.NTWK_NA4.length > 4) ? ', '+data.NTWK_NA4 : ''}"/>
				</s:VGroup>
				<s:Label id="parksIntersect" width="{pmehgChart.width+phChart.width+sulfateChart.width+carbonChart.width+wetlandChart.width}" paddingLeft="10" fontFamily="Arial" fontWeight="bold" fontSize="12" 
						 visible="false" 
						 includeInLayout="false"
						 text="NPS I&amp;M Park Units (with percent of park contained in this HUC): {(data.PARK_NA1.length > 4) ? data.PARK_NA1+' ('+data.PCT_AR1+'%)' : ''}{(data.PARK_NA2.length > 4) ? ', '+data.PARK_NA2+' ('+data.PCT_AR2+'%)' : ''}{(data.PARK_NA3.length > 4) ? ', '+data.PARK_NA3+' ('+data.PCT_AR3+'%)' : ''}{(data.PARK_NA4.length > 4) ? ', '+data.PARK_NA4+' ('+data.PCT_AR4+'%)' : ''}{(data.PARK_NA5.length > 4) ? ', '+data.PARK_NA5+' ('+data.PCT_AR5+'%)' : ''}{(data.PARK_NA6.length > 4) ? ', '+data.PARK_NA6+' ('+data.PCT_AR6+'%)' : ''}{(data.PARK_NA7.length > 4) ? ', '+data.PARK_NA7+' ('+data.PCT_AR7+'%)' : ''}{(data.PARK_NA8.length > 4) ? ', '+data.PARK_NA8+' ('+data.PCT_AR8+'%)' : ''}" />
				<s:VGroup id="parkGroup" width="{pmehgChart.width+phChart.width+sulfateChart.width+carbonChart.width+wetlandChart.width}" paddingLeft="10" fontFamily="Arial" fontWeight="bold" fontSize="12" >
					<s:Label text="NPS I&amp;M Park Units (with percent of park contained in this HUC):" />
				</s:VGroup>
				<mx:HBox id="charts" paddingLeft="2" paddingTop="15"> <!--width="{pmehgChart.width+phChart.width+sulfateChart.width+carbonChart.width+wetlandChart.width}" -->
					<!-- pH Chart -->
					<mx:VBox id="phChartAll" horizontalAlign="center" paddingTop="10" paddingLeft="5" paddingRight="5">
						<s:VGroup horizontalAlign="center">
							<mx:HBox horizontalAlign="center" verticalAlign="middle" width="100%">
								<s:VGroup horizontalAlign="center" verticalAlign="middle">
									<s:Label text="" />
									<s:Label text="pH" fontWeight="bold" textAlign="center" />
									<s:HGroup width="100%">
										<s:HGroup width="100%" />
										<s:Label text="(standard units)" 
												 fontWeight="bold" />
										<s:HGroup
											id="phQuestion"
											width="100%"
										    verticalAlign="middle"
											useHandCursor="true"
											buttonMode="true"
											mouseChildren="false"
										    click="dataTabs.selectedIndex = 1"
											toolTip="pH value represents the median value of pH measurements reported by the USGS and (or) the NPS for each HUC, and is reported in standard units." >
											<s:Ellipse height="13" width="13" includeInLayout="false">
												<s:stroke>
													<s:SolidColorStroke color="0xDBDBDD" weight="1"/>
												</s:stroke>
												<s:fill>
													<s:SolidColor color="0xDBDBDD" />
												</s:fill>
											</s:Ellipse>
											<mx:Text text="?" paddingLeft="2" paddingTop="-2" color="0x868686" fontWeight="bold" click="{dataTabs.selectedIndex = 1}" />
										</s:HGroup>
									</s:HGroup>
								</s:VGroup>
							</mx:HBox>
							<s:Label text="{(phValue == 0) ? 'Insufficient Data' : phValue}" fontWeight="bold" fontSize="12" color="0x6d8b2b" />
						</s:VGroup>
						<mx:ColumnChart id="phChart" dataProvider="{phQuantiles.getItemAt(0)}"
										showDataTips="true"
										height="350"
										width="150" 
										type="overlaid"
										selectionMode="multiple"
										dataTipFunction="dataTipFunction"
										creationComplete="{phQuantiles.refresh()}" >
							<mx:verticalAxis>
								<mx:LinearAxis interval="1" maximum="9" minimum="4.5"/>
							</mx:verticalAxis>
							<mx:horizontalAxis>
								<mx:CategoryAxis categoryField="constituent" displayName="pH (standard units)"/>
							</mx:horizontalAxis>
							<mx:series>
								<mx:ColumnSet>
									<mx:ColumnSeries minField="min" yField="20" displayName="0-20%" fill="{high}"/>
									<mx:ColumnSeries minField="20" yField="40" displayName="20-40%" fill="{highMid}"/>
									<mx:ColumnSeries minField="40" yField="60" displayName="40-60%" fill="{mid}"/>
									<mx:ColumnSeries minField="60" yField="80" displayName="60-80%" fill="{lowMid}"/>
									<mx:ColumnSeries minField="80" yField="100" displayName="80-100%" fill="{low}"/>
								</mx:ColumnSet>
								<mx:PlotSeries
									dataProvider="{phVal}"
									yField="value"
									displayName="ph"
									creationComplete="{phVal.refresh()}"
								    fill="{point}"
									itemRenderer="mx.charts.renderers.CircleItemRenderer">
								</mx:PlotSeries>
							</mx:series>
						</mx:ColumnChart>
					</mx:VBox>
					<!-- Sulfate Chart -->
					<mx:VBox id="sulfateChartAll" horizontalAlign="center" paddingTop="10" paddingLeft="5" paddingRight="5">
						<s:VGroup horizontalAlign="center">
							<mx:HBox horizontalAlign="center" verticalAlign="middle" width="100%">
								<s:VGroup horizontalAlign="center">
									<s:Label text="" />
									<s:Label text="SULFATE" fontWeight="bold" textAlign="center" />
									<s:HGroup width="100%">
										<s:HGroup width="100%" />
										<s:RichText textAlign="center" fontWeight="bold" height="100%">
											<s:span>(mg/L as SO</s:span>
											<s:span baselineShift="subscript">4</s:span>
											<s:span>)</s:span>
										</s:RichText>
										<s:HGroup
											id="sulfateQuestion"
											width="100%"
											verticalAlign="middle"
											useHandCursor="true"
											buttonMode="true"
											mouseChildren="false"
											click="dataTabs.selectedIndex = 1"
											toolTip="Sulfate concentration represents the median concentration of sulfate samples reported by the USGS and (or) the NPS for each HUC, and is reported in milligrams per liter, as sulfate." >
											<s:Ellipse height="13" width="13" includeInLayout="false">
												<s:stroke>
													<s:SolidColorStroke color="0xDBDBDD" weight="1"/>
												</s:stroke>
												<s:fill>
													<s:SolidColor color="0xDBDBDD" />
												</s:fill>
											</s:Ellipse>
											<mx:Text text="?" paddingLeft="2" paddingTop="-2" color="0x868686" fontWeight="bold" click="{dataTabs.selectedIndex = 1}" />
										</s:HGroup>
									</s:HGroup>
								</s:VGroup>
							</mx:HBox>
							<!--<s:Label text="{roundValues(sulfateValue.toString(),1)} mg/L" fontWeight="bold" fontSize="12" color="0x6d8b2b" />-->
							<s:RichText textAlign="center" fontWeight="bold" height="100%" fontSize="12" color="0x6d8b2b">
								<s:span>{(sulfateValue == 0) ? 'Insufficient Data' : sulfateValue + ' mg/L as SO'}</s:span>
								<s:span baselineShift="subscript">{(sulfateValue == 0) ? '' : '4'}</s:span>
							</s:RichText>
						</s:VGroup>
						<mx:ColumnChart id="sulfateChart" dataProvider="{sulfateQuantiles.getItemAt(0)}"
										showDataTips="true"
										height="350"
										width="150" 
										type="overlaid"
										selectionMode="multiple"
										dataTipFunction="dataTipFunction"
										creationComplete="{sulfateQuantiles.refresh()}"
										>
							<mx:verticalAxis>
								<mx:LogAxis interval="10" maximum="10000" minimum=".1" />
							</mx:verticalAxis>
							<mx:horizontalAxis>
								<mx:CategoryAxis categoryField="constituent" displayName="Sulfate (mg/L)"/>
							</mx:horizontalAxis>
							<mx:series>
								<mx:ColumnSet>
									<mx:ColumnSeries minField="min" yField="20" displayName="0-20%" fill="{low}"/>
									<mx:ColumnSeries minField="20" yField="40" displayName="20-40%" fill="{mid}"/>
									<mx:ColumnSeries minField="40" yField="60" displayName="40-60%" fill="{high}"/>
									<mx:ColumnSeries minField="60" yField="80" displayName="60-80%" fill="{mid}"/>
									<mx:ColumnSeries minField="80" yField="100" displayName="80-100%" fill="{low}"/>
								</mx:ColumnSet>
								<mx:PlotSeries
									dataProvider="{sulfateVal}"
									yField="value"
									displayName="sulfate" 
									creationComplete="{sulfateVal.refresh()}" fill="{point}"
									itemRenderer="mx.charts.renderers.CircleItemRenderer">
								</mx:PlotSeries>
							</mx:series>
						</mx:ColumnChart>
					</mx:VBox>
					<!-- Carbon Chart -->
					<mx:VBox id="carbonChartAll" horizontalAlign="center" paddingTop="10" paddingLeft="5" paddingRight="5">
						<s:VGroup horizontalAlign="center">
							<mx:HBox horizontalAlign="center" verticalAlign="middle" width="100%">
								<s:VGroup horizontalAlign="center">
									<s:Label text="TOTAL ORGANIC CARBON" width="100" fontWeight="bold" textAlign="center" paddingTop="4"/>
									<s:HGroup width="100%">
										<s:HGroup width="100%" />
										<s:Label text="(mg/L)" fontWeight="bold" textAlign="center" />
										<s:HGroup
											id="carbonQuestion"
											width="100%"
											verticalAlign="middle"
											useHandCursor="true"
											buttonMode="true"
											mouseChildren="false"
											click="dataTabs.selectedIndex = 1"
											toolTip="Total organic carbon concentration represents the median concentration from samples reported by the USGS and (or) the NPS for each HUC, and is reported in milligrams per liter." >
											<s:Ellipse height="13" width="13" includeInLayout="false">
												<s:stroke>
													<s:SolidColorStroke color="0xDBDBDD" weight="1"/>
												</s:stroke>
												<s:fill>
													<s:SolidColor color="0xDBDBDD" />
												</s:fill>
											</s:Ellipse>
											<mx:Text text="?" paddingLeft="2" paddingTop="-2" color="0x868686" fontWeight="bold" click="{dataTabs.selectedIndex = 1}" />
										</s:HGroup>
									</s:HGroup>
								</s:VGroup>
							</mx:HBox>
							<s:Label text="{(carbonValue == 0) ? 'Insufficient Data' : carbonValue + ' mg/L'}" fontWeight="bold" fontSize="12" color="0x6d8b2b" />
						</s:VGroup>
						<mx:ColumnChart id="carbonChart" dataProvider="{carbonQuantiles.getItemAt(0)}"
										showDataTips="true"
										height="350"
										width="150" 
										type="overlaid"
										selectionMode="multiple"
										dataTipFunction="dataTipFunction"
										creationComplete="{carbonQuantiles.refresh()}"
										>
							<mx:verticalAxis>
								<mx:LogAxis interval="10" maximum="100" minimum=".1" />
							</mx:verticalAxis>
							<mx:horizontalAxis>
								<mx:CategoryAxis categoryField="constituent" displayName="Carbon (mg/L)" />
							</mx:horizontalAxis>
							<mx:series>
								<mx:ColumnSet>
									<mx:ColumnSeries minField="min" yField="20" displayName="0-20%" fill="{low}"/>
									<mx:ColumnSeries minField="20" yField="40" displayName="20-40%" fill="{lowMid}"/>
									<mx:ColumnSeries minField="40" yField="60" displayName="40-60%" fill="{mid}"/>
									<mx:ColumnSeries minField="60" yField="80" displayName="60-80%" fill="{highMid}"/>
									<mx:ColumnSeries minField="80" yField="100" displayName="80-100%" fill="{high}"/>
								</mx:ColumnSet>
								<mx:PlotSeries
									dataProvider="{carbonVal}"
									yField="value"
									displayName="carbon" 
									creationComplete="{carbonVal.refresh()}" fill="{point}"
									itemRenderer="mx.charts.renderers.CircleItemRenderer">
								</mx:PlotSeries>
							</mx:series>
						</mx:ColumnChart>
					</mx:VBox>
					<!-- Total Hg Chart -->
					<!--<mx:VBox>
						<mx:ColumnChart id="thgChart" dataProvider="{thgQuantiles.getItemAt(0)}"
										showDataTips="true"
										height="350"
										width="150" 
										type="overlaid"
										selectionMode="multiple"
										creationComplete="{thgQuantiles.refresh()}"
										>
							<mx:verticalAxis>
								<mx:LogAxis interval="10" maximum="1000" minimum=".1" />
							</mx:verticalAxis>
							<mx:horizontalAxis>
								<mx:CategoryAxis categoryField="constituent" displayName="Total Hg (ng/L)" />
							</mx:horizontalAxis>
							<mx:series>
								<mx:ColumnSet>
									<mx:ColumnSeries minField="min" yField="20" displayName="0-20%" fill="{low}"/>
									<mx:ColumnSeries minField="20" yField="40" displayName="20-40%" fill="{lowMid}"/>
									<mx:ColumnSeries minField="40" yField="60" displayName="40-60%" fill="{mid}"/>
									<mx:ColumnSeries minField="60" yField="80" displayName="60-80%" fill="{highMid}"/>
									<mx:ColumnSeries minField="80" yField="100" displayName="80-100%" fill="{high}"/>
								</mx:ColumnSet>
								<mx:PlotSeries
									dataProvider="{thgVal}"
									yField="value"
									displayName="HUC value" 
									creationComplete="{thgVal.refresh()}" fill="{point}"
									>
								</mx:PlotSeries>
							</mx:series>
						</mx:ColumnChart>
						<mx:HBox horizontalAlign="center" width="100%">
							<mx:HBox horizontalAlign="center" width="100%">
								<mx:Box borderStyle="solid" 
										useHandCursor="true" 
										buttonMode="true" 
										mouseChildren="false" 
										toolTip="total Hg description" 
										click="navigateToURL(new URLRequest('http://wi.water.usgs.gov/mercury/HgWMAmethods.html'))" 
										borderColor="0x444444" borderThickness="1" backgroundColor="0xCCCCCC" paddingBottom="-3" paddingLeft="1" paddingRight="-1" paddingTop="-2">
									<mx:Text text="?" color="blue" fontWeight="bold" />
								</mx:Box>
							</mx:HBox>
						</mx:HBox>
					</mx:VBox>-->
					<!-- Wetland Chart -->
					<mx:VBox id="wetlandChartAll"  horizontalAlign="center" paddingTop="10" paddingLeft="5" paddingRight="5">
						<s:VGroup horizontalAlign="center">
							<mx:HBox horizontalAlign="center" verticalAlign="middle" width="100%">
								<s:VGroup horizontalAlign="center">
									<s:Label text="" />
									<s:Label text="WETLAND" fontWeight="bold" textAlign="center" />
									<s:HGroup width="100%">
										<s:HGroup width="100%" />
										<s:Label text="(%)" fontWeight="bold" textAlign="center" />
										<s:HGroup
											id="wetlandQuestion"
											width="100%"
											verticalAlign="middle"
											useHandCursor="true"
											buttonMode="true"
											mouseChildren="false"
											click="dataTabs.selectedIndex = 1"
											toolTip="Wetland value represents the areal percent of this HUC occupied by wetland land cover." >
											<s:Ellipse height="13" width="13" includeInLayout="false">
												<s:stroke>
													<s:SolidColorStroke color="0xDBDBDD" weight="1"/>
												</s:stroke>
												<s:fill>
													<s:SolidColor color="0xDBDBDD" />
												</s:fill>
											</s:Ellipse>
											<mx:Text text="?" paddingLeft="2" paddingTop="-2" color="0x868686" fontWeight="bold" click="{dataTabs.selectedIndex = 1}" />
										</s:HGroup>
									</s:HGroup>
								</s:VGroup>
							</mx:HBox>
							<s:Label text="{wetlandValue}%" fontWeight="bold" fontSize="12" color="0x6d8b2b" />
						</s:VGroup>
						<mx:ColumnChart id="wetlandChart" dataProvider="{wetlandQuantiles.getItemAt(0)}"
										showDataTips="true"
										height="350"
										width="150" 
										type="overlaid"
										selectionMode="multiple"
										dataTipFunction="dataTipFunction"
										creationComplete="{wetlandQuantiles.refresh()}"
										>
							<mx:verticalAxis>
								<mx:LogAxis interval="10" maximum="100" minimum=".0001" />
							</mx:verticalAxis>
							<mx:horizontalAxis>
								<mx:CategoryAxis categoryField="constituent" displayName="Wetland (%)"/>
							</mx:horizontalAxis>
							<mx:series>
								<mx:ColumnSet columnWidthRatio="2">
									<mx:ColumnSeries minField="min" yField="20" displayName="0-20%" fill="{low}"/>
									<mx:ColumnSeries minField="20" yField="40" displayName="20-40%" fill="{lowMid}"/>
									<mx:ColumnSeries minField="40" yField="60" displayName="40-60%" fill="{mid}"/>
									<mx:ColumnSeries minField="60" yField="80" displayName="60-80%" fill="{highMid}"/>
									<mx:ColumnSeries minField="80" yField="100" displayName="80-100%" fill="{high}"/>
								</mx:ColumnSet>
								<mx:PlotSeries
									dataProvider="{wetlandVal}"
									yField="value"
									displayName="wetland" 
									creationComplete="{wetlandVal.refresh()}" fill="{point}"
									itemRenderer="mx.charts.renderers.CircleItemRenderer">
								</mx:PlotSeries>
							</mx:series>
						</mx:ColumnChart>
					</mx:VBox>
					<!-- Predicted MeHg Chart -->
					<mx:VBox id="pmehgChartAll" horizontalAlign="center" backgroundColor="0xced6b4" borderColor="0xced6b4" paddingTop="10" paddingLeft="5" paddingRight="5">
						<s:VGroup id="pmehgHeader" horizontalAlign="center">
							<mx:HBox horizontalAlign="center" verticalAlign="middle" width="100%">
								<s:VGroup horizontalAlign="center">
									<s:Label text="PREDICTED" fontWeight="bold" textAlign="center" />
									<s:Label text="METHYLMERCURY" fontWeight="bold" textAlign="center" />
									<s:HGroup width="100%">
										<s:HGroup width="100%" />
										<s:Label text="(ng/L)" fontWeight="bold" textAlign="center" />
										<s:HGroup
											width="100%"
											id="predmehgQuestion"
											name="predmehgQuestion"
											verticalAlign="middle"
											useHandCursor="true"
											buttonMode="true"
											mouseChildren="false"
											click="dataTabs.selectedIndex = 1"
											toolTip="Predicted methylmercury concentration is generated by the model for each HUC, and is reported in nanograms per liter." >
											<s:Ellipse height="13" width="13" includeInLayout="false">
												<s:stroke>
													<s:SolidColorStroke color="0xDBDBDD" weight="1"/>
												</s:stroke>
												<s:fill>
													<s:SolidColor color="0xDBDBDD" />
												</s:fill>
											</s:Ellipse>
											<mx:Text text="?" paddingLeft="2" paddingTop="-2" color="0x868686" fontWeight="bold" click="{dataTabs.selectedIndex = 1}" />
										</s:HGroup>
									</s:HGroup>
								</s:VGroup>
								
							</mx:HBox>
							<s:Label text="{(Number(pmehgValue) == 0) ? 'Insufficient Data' : (Number(pmehgValue) &lt; 0.04) ? pmehgValue + ' ng/L*' : pmehgValue + ' ng/L'}" fontWeight="bold" fontSize="12" color="0x6d8b2b" />
						</s:VGroup>
						<mx:ColumnChart id="pmehgChart" dataProvider="{pmehgQuantiles.getItemAt(0)}"
									showDataTips="true"
									height="350"
									width="150" 
									type="overlaid" 
									selectionMode="multiple" 
									dataTipFunction="dataTipFunction"
									creationComplete="{pmehgQuantiles.refresh()}"
									>
							<mx:verticalAxis>
								<mx:LogAxis interval="1" maximum="1" minimum=".03" />
							</mx:verticalAxis>
							<mx:horizontalAxis>
								<mx:CategoryAxis categoryField="constituent" displayName="Predicted methylmercury (ng/L)"/>
							</mx:horizontalAxis>
							<mx:series>
								<mx:ColumnSet>
									<mx:ColumnSeries minField="min" yField="20" displayName="0-20%" fill="{low}"/>
									<mx:ColumnSeries minField="20" yField="40" displayName="20-40%" fill="{lowMid}"/>
									<mx:ColumnSeries minField="40" yField="60" displayName="40-60%" fill="{mid}"/>
									<mx:ColumnSeries minField="60" yField="80" displayName="60-80%" fill="{highMid}"/>
									<mx:ColumnSeries minField="80" yField="100" displayName="80-100%" fill="{high}"/>
								</mx:ColumnSet>
								<mx:PlotSeries
									dataProvider="{pmehgVal}"
									yField="value"
									displayName="pmehg" 
									creationComplete="{pmehgVal.refresh()}" fill="{point}"
									itemRenderer="mx.charts.renderers.CircleItemRenderer">
								</mx:PlotSeries>
								<!--<mx:PlotSeries displayName="Reporting Level" rollOver="plotOver(event)" mouseOver="plotOver(event);" itemRenderer="assets.LineItemRenderer" dataProvider="{reportingLevelValue}" toolTip="Reporting Level" yField="rl" fill="{reportingLevel}"/>-->
							</mx:series>
						</mx:ColumnChart>
					</mx:VBox>
				</mx:HBox>
				<s:HGroup width="100%" horizontalAlign="right" paddingTop="10">
					<s:Label text="Contact " />
					<s:Label textDecoration="underline" text="hgmapper@usgs.gov" useHandCursor="true" mouseChildren="false" buttonMode="true" click="navigateToURL(new URLRequest('mailto:hgmapper@usgs.gov'))" />
					<s:Label text="for more information" />
				</s:HGroup>
				<s:HGroup id="asteriskText" visible="{(data.CPREDMEHG &lt; 0.04) ? true : false}" includeInLayout="{(data.CPREDMEHG &lt; 0.04) ? true : false}" horizontalAlign="left" paddingTop="20">
					<s:Label width="800" text="*A methylmercury reporting level of 0.04 ng/L was established for the USGS Wisconsin Mercury Research Laboratory (WRML) in 2000. Advances in technology since this time have lead to analytical confidence in numbers as low as 0.02 ng/L. All methylmercury model calibration data were analyzed by the USGS WRML." />
				</s:HGroup>
			</mx:VBox>
			<!-- Explanation tab -->
			<mx:HBox id="explanationTab" label="Explanation" height="100%" width="95%" horizontalAlign="center" paddingTop="25">
				<s:VGroup width="70%">
					
					<s:Label text="Explanation" fontWeight="bold" fontSize="14" color="0xa75d44" />
					
					<s:Label text="Hydrologic Unit Code (HUC)" fontWeight="bold" paddingTop="20" useHandCursor="true" buttonMode="true" mouseChildren="false" click="navigateToURL(new URLRequest('http://water.usgs.gov/GIS/huc.html'))" />
					<s:VGroup>
						<s:RichText width="500">
							<s:span fontStyle="italic">Definition - </s:span>
							<s:span>Hydrologic Unit Codes (HUCs) are codes assigned to defined hydrologic areas.  These HUCs represent published boundaries that were determined by the successive subdivision of large areas representing either major river watersheds or the combined watersheds of a series of rivers flowing to the same receiving waterbody (for example, the Great Lakes).  HUCs can reflect part or all of a watershed, multiple watersheds, or a distinct hydrologic feature.</s:span>
						</s:RichText>
						<s:Label width="500" paddingTop="10" text="HUCs are used here as hydrologically relevant areas upon which to aggregate measured and predicted surface-water-quality data, as well as percent wetland cover." />
					</s:VGroup>
					
					<s:Label text="pH" fontWeight="bold" paddingTop="20" />
					<s:VGroup>
						<s:RichText width="500">
							<s:span fontStyle="italic">Definition - </s:span>
							<s:span>pH is the negative log (base 10) concentration of hydrogen ions (H</s:span>
							<s:span baselineShift="superscript">+</s:span>
							<s:span>) in solution. Water with a pH of 7 is considered neutral. Values below 7 indicate increasingly acidic solutions and values above 7 indicate increasingly basic solutions.</s:span>
						</s:RichText>
						<!--<s:Label width="500" text="Definition - pH is the negative log (base 10) concentration of hydrogen ions (H+) in solution. Water with a pH of 7 is considered neutral. Values below 7 indicate increasingly acidic solutions and values above 7 indicate increasingly basic solutions." />
						--><s:Label width="500" paddingTop="10" text="pH value represents the median value of pH measurements reported by the USGS and (or) the NPS for each HUC from 1982 to 2011. Values are reported in standard units." />
					</s:VGroup>
					
					<s:Label text="Sulfate" fontWeight="bold" paddingTop="20" />
					<s:VGroup>
						<s:RichText width="500">
							<s:span fontStyle="italic">Definition - </s:span>
							<s:span>The chemical formula of sulfate is SO</s:span>
							<s:span baselineShift="subscript">4</s:span>
							<s:span baselineShift="superscript">2-</s:span>
							<s:span>.</s:span>
						</s:RichText>
						<s:Label width="500" paddingTop="10" text="Sulfate concentration represents the median concentration of sulfate samples reported by the USGS and (or) the NPS for each HUC from 1982 to 2011.  Concentrations are reported in milligrams per liter, as sulfate." />
					</s:VGroup>
					
					<s:Label text="Total Organic Carbon" fontWeight="bold" paddingTop="20" />
					<s:VGroup>
						<s:RichText width="500">
							<s:span fontStyle="italic">Definition - </s:span>
							<s:span>Total organic carbon is a measure of the organic carbon mass per volume in an unfiltered water sample. For this product, dissolved organic carbon (that is, organic carbon mass per volume in a filtered water sample) results were considered equivalent to total organic carbon results.  As such, 'total organic carbon' within this product refers to either the total or dissolved form of organic carbon.</s:span>
						</s:RichText>
						<s:Label width="500" paddingTop="10" text="Total organic carbon concentration represents the median total (or dissolved) organic carbon concentration from samples reported by the USGS and (or) the NPS for each HUC from 1982 to 2011.  Concentrations are reported in milligrams per liter." />
					</s:VGroup>

					<s:Label text="Wetland" fontWeight="bold" paddingTop="20" />
					<s:VGroup>
						<s:RichText width="500">
							<s:span fontStyle="italic">Definition - </s:span>
							<s:span> Wetland areas are characterized by perennially or seasonally saturated soils.</s:span>
						</s:RichText>
						<s:Label width="500" paddingTop="10" text="Wetland value represents the areal percent of this HUC occupied by wetland land cover.  These data were determined in a Geographic Information System (GIS), using land cover data from the 2006 National Land Cover Dataset (NLCD 2006) and variously dated National Oceanic and Atmospheric Administration (NOAA) Coastal Change Analysis Program (C-CAP) Regional Land Cover datasets." />
					</s:VGroup>
					
					<s:Label text="Predicted methylmercury" fontWeight="bold" paddingTop="20" />
					<s:VGroup>
						<s:RichText width="500">
							<s:span fontStyle="italic">Definition - </s:span>
							<s:span>The chemical formula of methylmercury is [CH</s:span>
							<s:span baselineShift="subscript">3</s:span>
							<s:span>Hg]</s:span>
							<s:span baselineShift="superscript">+</s:span>
							<s:span>. The attached methyl group allows the mercury atom to more easily assimilate into biotic tissues, thereby allowing it to bioaccumulate and biomagnify in the food web.</s:span>
						</s:RichText>
						<s:Label width="500" paddingTop="10" text="Predicted methylmercury concentration is generated by the model for each HUC.  Inputs to this model include HUC-level medians of measured pH, sulfate, total organic carbon, and total mercury as well as percent wetland coverage.  Predicted concentrations are reported in nanograms per liter." />
					</s:VGroup>
					
					<s:Label text="NPS I&amp;M Networks" fontWeight="bold" paddingTop="20" useHandCursor="true" buttonMode="true" mouseChildren="false" click="navigateToURL(new URLRequest('http://science.nature.nps.gov/im/networks.cfm'))" />
					<s:Label width="500" text="National park units with significant natural resources are grouped into 32 networks as part of the NPS Inventory and Monitoring (I&amp;M) Program.  The networks are based on geography and shared natural-resource characteristics and facilitate collaboration among parks in natural-resource inventory and monitoring." />
					
					<s:Label text="NPS I&amp;M Park Units" fontWeight="bold" paddingTop="20" useHandCursor="true" buttonMode="true" mouseChildren="false" click="navigateToURL(new URLRequest('http://science.nature.nps.gov/im/networks.cfm'))" />
					<s:Label width="500" paddingBottom="10" text="National park units include national parks, national preserves, national monuments, national memorials, national historic sites, national seashores, and national battlefield parks." />
					
				</s:VGroup>
				<s:VGroup horizontalAlign="center">
					<s:VGroup horizontalAlign="center">
						<mx:HBox horizontalAlign="center" verticalAlign="middle" width="100%">
							<s:VGroup horizontalAlign="center">
								<s:Label text="TOTAL ORGANIC CARBON" width="100" fontWeight="bold" textAlign="center" />
								<s:HGroup>
									<s:Label text="(mg/L)" fontWeight="bold" textAlign="center" />
									<s:HGroup
										verticalAlign="middle"
										useHandCursor="true"
										buttonMode="true"
										mouseChildren="false"
										click="dataTabs.selectedIndex = 1"
										toolTip="Total organic carbon concentration represents the median concentration from samples reported by the USGS and (or) the NPS for each HUC, and is reported in milligrams per liter." >
										<s:Ellipse height="13" width="13" includeInLayout="false">
											<s:stroke>
												<s:SolidColorStroke color="0xDBDBDD" weight="1"/>
											</s:stroke>
											<s:fill>
												<s:SolidColor color="0xDBDBDD" />
											</s:fill>
										</s:Ellipse>
										<mx:Text text="?" paddingLeft="2" paddingTop="-2" color="0x868686" fontWeight="bold" click="{dataTabs.selectedIndex = 1}" />
									</s:HGroup>
								</s:HGroup>
							</s:VGroup>
						</mx:HBox>
						<s:Label text="3.8 mg/L" fontWeight="bold" fontSize="12" color="0x6d8b2b" />
					</s:VGroup>
					<mx:ColumnChart id="sampleChart" dataProvider="{carbonQuantiles.getItemAt(0)}"
									showDataTips="true"
									height="350"
									width="150" 
									type="overlaid"
									selectionMode="multiple"
									dataTipFunction="exDataTipFunction"
									creationComplete="{carbonQuantiles.refresh()}"
									>
						<mx:verticalAxis>
							<mx:LogAxis interval="10" maximum="100" minimum=".1" />
						</mx:verticalAxis>
						<mx:horizontalAxis>
							<mx:CategoryAxis categoryField="constituent" displayName="Carbon (mg/L)" />
						</mx:horizontalAxis>
						<mx:series>
							<mx:ColumnSet>
								<mx:ColumnSeries minField="min" yField="20" displayName="0-20%" fill="{low}"/>
								<mx:ColumnSeries minField="20" yField="40" displayName="20-40%" fill="{lowMid}"/>
								<mx:ColumnSeries minField="40" yField="60" displayName="40-60%" fill="{mid}"/>
								<mx:ColumnSeries minField="60" yField="80" displayName="60-80%" fill="{highMid}"/>
								<mx:ColumnSeries minField="80" yField="100" displayName="80-100%" fill="{high}"/>
							</mx:ColumnSet>
							<mx:PlotSeries
								dataProvider="{carbonVal}"
								yField="value"
								displayName="carbon"
								creationComplete="{carbonVal.refresh()}" fill="{point}"
								itemRenderer="mx.charts.renderers.CircleItemRenderer">
							</mx:PlotSeries>
						</mx:series>
					</mx:ColumnChart>
					
					<s:Label text="Use of logarithmic scales" width="150" textAlign="left" fontWeight="bold" paddingTop="20" />
					<s:Label width="150" textAlign="left" text="A logarithmic axis was selected for displaying sulfate, total organic carbon, wetland, and predicted methylmercury values. Like many other water-quality parameters, these data are positively-skewed, and a logarithmic axis enables a clearer display of the data distribution." />
					
				</s:VGroup>
			</mx:HBox>
			<!-- Park data tab -->
			<mx:VBox id="parkDataTab" label="Park Data" height="100%" width="100%" paddingLeft="30" paddingRight="30" paddingTop="15" >
				<s:Label text="Park Data" fontWeight="bold" fontSize="14" color="0xa75d44" />
				<mx:Box id="finderTools" color="black" backgroundColor="0xFFFFFF" borderStyle="solid" borderColor="white" paddingBottom="5" paddingLeft="15" paddingRight="15" paddingTop="15" width="100%" >
					<mx:Text width="90%" text="Choose from the dropdown lists or enter text to find a specific unit or network.  Choosing a network will narrow the list of units to the units in that network." />
					<s:HGroup width="100%">
						<mx:Form paddingTop="10" horizontalCenter="left">
							<mx:FormItem label="Network:">
								<s:ComboBox id="networkCombo" width="250" enabled="{networks.length > 0}" dataProvider="{networks}" close="networkChoose(event)"/>
							</mx:FormItem>
							<mx:FormItem label="Unit:">
								<s:ComboBox id="unitCombo" width="250" enabled="{unitResults.length > 0}" visible="true" dataProvider="{unitResults}" />
							</mx:FormItem>
							<mx:FormItem>
								<mx:HBox>
									<mx:Button id="parkGo" label="Go" click="chooseEvent(event)" />
									<mx:Button label="Clear" toolTip="Reset to full list of units" click="unitReset()" />
								</mx:HBox>
							</mx:FormItem>
						</mx:Form>
						<s:HGroup verticalAlign="bottom" horizontalAlign="right" height="100%" width="100%">
							<controls:WrapButton id="downloadParkData" styleName="wrapButton" cornerRadius="5" label="Download Data for All Parks" chromeColor="0xf5a230" click="{dataTabs.selectedIndex = 3}" width="125" height="50" color="black" fontWeight="bold" right="10" bottom="5"/>
						</s:HGroup>
					</s:HGroup>
				</mx:Box>
				<s:BorderContainer id="loadingMask" visible="{networkCombo.enabled == false}" borderVisible="false"  borderWeight="0" height="{finderTools.height}" width="{finderTools.width}" includeInLayout="false" >
					<s:layout> 
						<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/> 
					</s:layout> 
					<s:Label text="... Loading ..." fontSize="16" fontWeight="bold" color="black" />
				</s:BorderContainer>
				<s:VGroup id="parkTable" textAlign="center" paddingTop="20">
					
				</s:VGroup>
				<s:HGroup id="parkDataAsteriskText" visible="{hasAsterisk}" includeInLayout="{parkDataAsteriskText}" horizontalAlign="left" paddingTop="20">
					<s:Label width="800" text="*A methylmercury reporting level of 0.04 ng/L was established for the USGS Wisconsin Mercury Research Laboratory (WRML) in 2000. Advances in technology since this time have lead to analytical confidence in numbers as low as 0.02 ng/L. All methylmercury model calibration data were analyzed by the USGS WRML." />
				</s:HGroup>
			</mx:VBox>
			<!-- Data download tab -->
			<mx:VBox id="dataDownloadTab" label="Download Data" height="100%" width="100%" fontWeight="normal" horizontalAlign="center">
				<mx:VBox width="90%" horizontalAlign="left" verticalAlign="middle">
					<s:Label text="Download Data" paddingTop="10" fontWeight="bold" fontSize="14" color="0xa75d44" />
					<s:Label text="Download Data for All Hydrologic Units (HUCs)" fontSize="12" textAlign="left" fontWeight="bold" color="black" paddingTop="30" paddingBottom="5"/>
					<mx:VBox fontWeight="bold" height="50%" width="90%" verticalGap="0" paddingTop="10">
						<mx:HBox width="100%" fontWeight="bold" fontSize="12" paddingBottom="5" borderColor="Black" color="white" paddingTop="5" borderStyle="solid" backgroundColor="0x82955d" height="25" horizontalAlign="center" verticalAlign="middle">
							<s:Label text="" width="20%" height="100%" paddingLeft="5"/>
							<s:Label text="FILE FORMAT" width="30%" height="100%" paddingLeft="5"/>
							<s:Label text="FILE SIZE" width="15%" height="100%" paddingLeft="5"/>
							<s:Label text="DESCRIPTION" width="35%" height="100%" paddingLeft="5"/>
						</mx:HBox>
						<mx:HBox width="100%" borderStyle="solid" horizontalAlign="center" verticalAlign="middle">
							<s:HGroup width="20%" paddingLeft="10">
								<controls:WrapButton id="downloadTable" cornerRadius="5" label="Download Table" chromeColor="0x90C050" click="Alert.show('This mapper contains provisional data that is not yet available for download. Contact hgmapper@usgs.gov for more information.')" width="100" height="50" color="black" fontWeight="bold" right="10" bottom="5"/>
								<!--<s:Label text="Table" useHandCursor="true" 
									 buttonMode="true" 
									 mouseChildren="false" 
									 click="navigateToURL(new URLRequest(''))" color="0x848BED" paddingLeft="5"/>-->
							</s:HGroup>
							<s:Label text="Comma-delimited text" fontWeight="normal" width="30%" paddingLeft="5"/>
							<s:Label text="23KB" fontWeight="normal" width="15%" paddingLeft="5"/>
							<mx:VBox width="35%" verticalGap="-4">
								<mx:Text width="100%" fontWeight="normal" text="Tabular data saved as a comma-"/>
								<mx:Text width="100%" fontWeight="normal" text="delimited text file. It contains"/>
								<mx:HBox horizontalGap="0" width="100%">
									<mx:Text fontWeight="normal" text="pH" color="black" paddingRight="-2"
											 textDecoration="underline"
											 useHandCursor="true" 
											 buttonMode="true" 
											 mouseChildren="false" 
											 click="{dataTabs.selectedIndex = 1}"
											 toolTip="pH value represents the median value of pH measurements reported by the USGS and (or) the NPS for each HUC, and is reported in standard units."/>
									<mx:Text fontWeight="normal" text=","/>
									<mx:Text fontWeight="normal" text="sulfate" color="black" paddingRight="-2"
											 textDecoration="underline"
											 useHandCursor="true" 
											 buttonMode="true" 
											 mouseChildren="false" 
											 click="{dataTabs.selectedIndex = 1}"
											 toolTip="Sulfate concentration represents the median concentration of sulfate samples reported by the USGS and (or) the NPS for each HUC, and is reported in milligrams per liter."/>
									<mx:Text fontWeight="normal" text=","/>
									<mx:Text fontWeight="normal" text="total organic carbon" color="black" paddingRight="-2"
											 textDecoration="underline"
											 useHandCursor="true" 
											 buttonMode="true" 
											 mouseChildren="false" 
											 click="{dataTabs.selectedIndex = 1}"
											 toolTip="Total organic carbon concentration represents the median concentration from samples reported by the USGS and (or) the NPS for each HUC, and is reported in milligrams per liter."/>
									<mx:Text fontWeight="normal" text=", "/>
								</mx:HBox>
								<mx:HBox horizontalGap="0" width="100%">
									<mx:Text fontWeight="normal" text="wetland" color="black" paddingRight="-2"
											 textDecoration="underline"
											 useHandCursor="true" 
											 buttonMode="true" 
											 mouseChildren="false" 
											 click="{dataTabs.selectedIndex = 1}"
											 toolTip="Wetland value represents the areal percent of this HUC occupied by wetland land cover."/>
									<mx:Text fontWeight="normal" text=", and"/>
									<mx:Text fontWeight="normal" text="predicted methylmercury" color="black" paddingRight="-2"
											 textDecoration="underline"
											 useHandCursor="true" 
											 buttonMode="true" 
											 mouseChildren="false" 
											 click="{dataTabs.selectedIndex = 1}"
											 toolTip="Predicted methylmercury concentration is generated by the model for each HUC, and is reported in nanograms per liter."/>
								</mx:HBox>
								<mx:HBox horizontalGap="0" width="100%">
									<mx:Text fontWeight="normal" text="data. Associated metadata is"/>
								</mx:HBox>
								<mx:Text fontWeight="normal" text="included in download."/>
							</mx:VBox>
						</mx:HBox>
						<mx:HBox width="100%" borderStyle="solid" horizontalAlign="center" verticalAlign="middle">
							<s:HGroup width="20%" paddingLeft="10">
								<controls:WrapButton id="downloadSpatial" cornerRadius="5" label="Download Spatial Data" chromeColor="0x90C050" click="Alert.show('This mapper contains provisional data that is not yet available for download. Contact hgmapper@usgs.gov for more information.')" width="100" height="50" color="black" fontWeight="bold" right="10" bottom="5"/>
								<!--<s:Label text="Spatial (GIS)" useHandCursor="true" 
									 buttonMode="true" 
									 mouseChildren="false" 
									 click="navigateToURL(new URLRequest('http://wim.usgs.gov/MercuryMapper/downloads/nps_hgsensitivity_shp.zip'))" color="0x848BED" paddingLeft="5"/>-->
							</s:HGroup>
							<s:Label text="Shapefile" fontWeight="normal" width="30%" paddingLeft="5"/>
							<s:Label text="4.27MB" fontWeight="normal" width="15%" paddingLeft="5"/>
							<mx:VBox width="35%" verticalGap="-4">
								<mx:Text fontWeight="normal" width="100%" text="The USGS 1:2M HUC"/>
								<mx:Text fontWeight="normal" width="100%" text="layer* attributed with"/>
								<mx:HBox horizontalGap="0" width="100%">
									<mx:Text fontWeight="normal" text="pH" color="black" paddingRight="-2"
											 textDecoration="underline"
											 useHandCursor="true" 
											 buttonMode="true" 
											 mouseChildren="false" 
											 click="{dataTabs.selectedIndex = 1}"
											 toolTip="pH value represents the median value of pH measurements reported by the USGS and (or) the NPS for each HUC, and is reported in standard units."/>
									<mx:Text fontWeight="normal" text=","/>
									<mx:Text fontWeight="normal" text="sulfate" color="black" paddingRight="-2"
											 textDecoration="underline"
											 useHandCursor="true" 
											 buttonMode="true" 
											 mouseChildren="false" 
											 click="{dataTabs.selectedIndex = 1}"
											 toolTip="Sulfate concentration represents the median concentration of sulfate samples reported by the USGS and (or) the NPS for each HUC, and is reported in milligrams per liter."/>
									<mx:Text fontWeight="normal" text=","/>
									<mx:Text fontWeight="normal" text="total organic carbon" color="black" paddingRight="-2"
											 textDecoration="underline"
											 useHandCursor="true" 
											 buttonMode="true" 
											 mouseChildren="false" 
											 click="{dataTabs.selectedIndex = 1}"
											 toolTip="Total organic carbon concentration represents the median concentration from samples reported by the USGS and (or) the NPS for each HUC, and is reported in milligrams per liter."/>
									<mx:Text fontWeight="normal" text=", "/>
								</mx:HBox>
								<mx:HBox horizontalGap="0" width="100%">
									<mx:Text fontWeight="normal" text="wetland" color="black" paddingRight="-2"
											 textDecoration="underline"
											 useHandCursor="true" 
											 buttonMode="true" 
											 mouseChildren="false" 
											 click="{dataTabs.selectedIndex = 1}"
											 toolTip="Wetland value represents the areal percent of this HUC occupied by wetland land cover."/>
									<mx:Text fontWeight="normal" text=", and"/>
									<mx:Text fontWeight="normal" text="predicted methylmercury" color="black" paddingRight="-2"
											 textDecoration="underline"
											 useHandCursor="true" 
											 buttonMode="true" 
											 mouseChildren="false" 
											 click="{dataTabs.selectedIndex = 1}"
											 toolTip="Predicted methylmercury concentration is generated by the model for each HUC, and is reported in nanograms per liter."/>
								</mx:HBox>
								<mx:Text fontWeight="normal" text="data. Associated metadata is"/>
								<mx:Text fontWeight="normal" text="included in download."/>
							</mx:VBox>
						</mx:HBox>
						<mx:HBox paddingTop="10" horizontalGap="3" fontWeight="normal">
							<s:Label text="* Layer has been modified slightly from its"/>
							<mx:HBox horizontalGap="0">
								<s:Label text="original form" useHandCursor="true" textDecoration="underline" 
										 buttonMode="true" 
										 mouseChildren="false" 
										 click="navigateToURL(new URLRequest('http://www.nationalatlas.gov/metadata/hucs00m020.html'))" width="20%" color="black" />
								<s:Label text=". See associated metadata for details regarding changes."/>
							</mx:HBox>
						</mx:HBox>
					</mx:VBox>
					<!--<mx:HBox height="30%" width="90%" horizontalAlign="right" fontWeight="normal" paddingTop="20" paddingBottom="20" paddingRight="20">
						<s:Label fontSize="10" fontWeight="normal" text="Contact"/>
						<s:Label fontSize="10" fontWeight="normal" color="black" text="hgmapper@usgs.gov" textDecoration="underline" 
								 useHandCursor="true" 
								 buttonMode="true" 
								 mouseChildren="false" 
								 click="navigateToURL(new URLRequest('mailto:hgmapper@usgs.gov'))" />
						<s:Label fontSize="10" fontWeight="normal" text="for more information"/>
					</mx:HBox>-->
					<s:HGroup width="90%" horizontalAlign="right" paddingTop="10">
						<s:Label text="Contact " />
						<s:Label textDecoration="underline" text="hgmapper@usgs.gov" useHandCursor="true" mouseChildren="false" buttonMode="true" click="navigateToURL(new URLRequest('mailto:hgmapper@usgs.gov'))" />
						<s:Label text="for more information" />
					</s:HGroup>
				</mx:VBox>
				
			</mx:VBox>
		</mx:TabNavigator>
	</mx:VBox>
	
</wim:WiMInfoWindow>
